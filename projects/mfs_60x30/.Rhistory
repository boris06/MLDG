?rbinom
source('~/Coursera/Data Science Specialization/Reproducible Research/lectures.R', echo=TRUE)
install.packages("kernlab")
source('~/Coursera/Data Science Specialization/Reproducible Research/lectures.R', echo=TRUE)
names(trainSpam)
str(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
?kernlab
info(kernlab)
trainSpam$numType
trainSpam$type
as.numeric(trainSpam$type)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
## Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
source('~/Razno/Andrej/NPV_IRR.R', echo=TRUE)
source('~/Razno/Andrej/NPV_IRR.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Razno/Andrej/NPV_IRR.R', echo=TRUE)
exit
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
graphfile
source('~/.active-rstudio-document', echo=TRUE)
graphfile
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
str(prob.tidy)
View(df)
# constructing the empty data frame according to time span
years <- yearmin:yearmax
months <- monthmin:monthmax
yearmonth <- as.data.frame(cbind(rep(years,each=length(months)),
rep(months,times=length(years))))
colnames(yearmonth) <- c("year","month")
# reading graph file into the data frame
g <- list()
count <- 0
dfv <- NULL
df <- NULL
for (year in c(yearmin:yearmax)){
for (month in c(monthmin:monthmax)) {
graphfile <- paste0(graphpath,"/",sprintf(format,model,
granularity,timeinter,
year,month,depthmin*(-1),
depthmax*(-1)))
count <- count + 1
g[[count]] <- read.graph(graphfile, format = "graphml")
mean_wind_energy <- V(g[[count]])$mean_wind_energy
vc <- vcount(g[[count]])
dfv1 <- data.frame(year=rep(year,times=vc),
month=rep(month,times=vc),
from=V(g[[count]])$name,
mean_wind_energy=mean_wind_energy)
dfv <- rbind(dfv,dfv1)
ec <- ecount(g[[count]])
if (ec > 0) {
edges <- get.edgelist(g[[count]])
prob <- E(g[[count]])$conf
df1 <- data.frame(year=rep(year,times=ec),
month=rep(month,times=ec),
from=edges[,1],
to=edges[,2],
prob=prob)
df <- rbind(df,df1)
}
}
}
warnings()
prob.tidy <- dcast(df, year + month ~ from + to, value.var = "prob")
prob.tidy <- merge(yearmonth, prob.tidy, by = c("year","month"),
all.x = TRUE)
prob.tidy <- prob.tidy[with(prob.tidy, order(year,month)), ]
wind.tidy <- dcast(dfv, year + month ~ from, value.var = "mean_wind_energy")
wind.tidy <- merge(yearmonth, wind.tidy, by = c("year","month"),
all.x = TRUE)
wind.tidy <- wind.tidy[with(wind.tidy, order(year,month)), ]
edgewindcor <- function(edge, prob.tidy, wind.tidy) {
fromto <- unlist(strsplit(edge, "_"))
from <- fromto[1]
to <- fromto[2]
datacorr <- data.frame(prob.tidy[,edge],wind.tidy[,from])
datacorr <- datacorr[complete.cases(datacorr),]
if (length(datacorr[,1]) > 3) {
cor.t <- cor.test(datacorr[,1],datacorr[,2])
c(from, to, as.numeric(cor.t$estimate), as.numeric(cor.t$statistic),
as.numeric(cor.t$conf.int[1]), as.numeric(cor.t$conf.int[2]), cor.t$p.value)
}
else {
c(from, to, NA, NA, NA, NA, NA)
}
}
wind.corr <- lapply(colnames(prob.tidy[-c(1,2)]),FUN=edgewindcor, prob.tidy, wind.tidy)
wind.corr <- as.data.frame(do.call(rbind, wind.corr))
wind.corr <- wind.corr[complete.cases(wind.corr),]
colnames(wind.corr) <- c("from","to","cor","t","conf.int.1","conf.int.2","pvalue")
View(wind.corr)
View(wind.corr)
vert <- get.data.frame(g[[1]], what="vertices")
vert1 <- cbind(vert[,"name"],subset(vert, select=-c(name)))
g.wind.corr <- graph.data.frame(wind.corr, directed=TRUE, vertices=vert1)
g.file <- paste0(graphpath,sprintf(format.wind.corr,model,granularity,timeinter,yearmin,yearmax,depthmin,depthmax))
write.graph(g.wind.corr, g.file,format=c("graphml"))
g.file
hist(wind.corr$pvalue)
str(wind.corr$pvalue)
hist(as.numeric(wind.corr$pvalue))
aa <- as.numeric(wind.corr$pvalue)
aa
wind.corr$pvalue
as.numeric(levels(wind.corr$pvalue))[wind.corr$pvalue]
aa <- as.numeric(levels(wind.corr$pvalue))[wind.corr$pvalue]
hist(aa)
vert <- get.data.frame(g[[1]], what="vertices")
vert1 <- cbind(vert[,"name"],subset(vert, select=-c(name)))
g.wind.corr <- graph.data.frame(wind.corr, directed=TRUE, vertices=vert1)
g.file <- paste0(graphpath,"/",sprintf(format.wind.corr,model,granularity,timeinter,yearmin,yearmax,depthmin,depthmax))
write.graph(g.wind.corr, g.file,format=c("graphml"))
